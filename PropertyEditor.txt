from cytomine.models import Property

from cellsiaviewer.data.cytomine.models import PropertyCollection


class PropertyEditor:
    
    def __init__(self, obj):
        self.object = obj


    def _search_property(self, key):
        current_properties = PropertyCollection(self.object).fetch()
        return next((p for p in current_properties if p.key == key), None)


    def get_property_value(self, key):
        prop = self._search_property(key)

        if prop:
            prop.fetch()
            return prop.value.strip('[]').split(', ')

        return []


    def add_property(self, key, value):
        
        current_property = self._search_property(key)

        if current_property:    # Si existe la propiedad, machacamos el valor
            current_property.fetch()
            current_property.value = value
            current_property.update()
        else:                   # Si no existe la propiedad, la creamos          
            Property(self.object, key=key, value=value).save()
    

    def append_property(self, key, value):
        
        current_property = self._search_property(key)

        if current_property:    # Si existe la propiedad, a√±adimos el valor al final
            current_property.fetch()
            property_list = current_property.value.strip('[]').split(', ')
            property_list.append(value)
            property_list_without_duplicates = list(dict.fromkeys(property_list))  # Remove duplicates
            current_property.value = str(property_list_without_duplicates).replace("'","")
            current_property.update()
        else:                   # Si no existe la propiedad, la creamos          
            Property(self.object, key=key, value=value).save()
    

    def delete_property(self, key):

        current_property = self._search_property(key)
        if current_property:
            current_property.delete()